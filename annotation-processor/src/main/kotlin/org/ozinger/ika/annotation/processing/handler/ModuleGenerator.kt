package org.ozinger.ika.annotation.processing.handler

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import org.ozinger.ika.annotation.processing.Generator
import java.io.File
import javax.annotation.processing.ProcessingEnvironment
import javax.lang.model.element.Element
import javax.lang.model.element.ElementKind

class ModuleGenerator(processingEnv: ProcessingEnvironment, kaptKotlinGeneratedDir: String?) :
    Generator(processingEnv, kaptKotlinGeneratedDir) {
    private val classNames = mutableListOf<String>()

    override fun process(elements: Set<Element>) {
        elements
            .filter { it.kind == ElementKind.CLASS }
            .forEach { `class` ->
                val packageName = processingEnv.elementUtils.getPackageOf(`class`).qualifiedName
                val className = `class`.simpleName
                classNames.add("$packageName.$className")
            }

        val moduleBuilder = CodeBlock.builder()
            .beginControlFlow("module")
            .addStatement("single<HandlerListProvider> { AutoGeneratedHandlerListProvider() }")

        for (name in classNames) {
            moduleBuilder.addStatement("single<AbstractHandler>(named(%S)) { %L() }", name, name)
        }

        moduleBuilder.endControlFlow()

        val fileSpec = FileSpec.builder("org.ozinger.ika.koin", "AutoGeneratedHandlerModule")
            .addImport("org.koin.dsl", "module")
            .addImport("org.koin.core.qualifier", "named")
            .addImport(
                "org.ozinger.ika.handler",
                "AbstractHandler",
                "HandlerListProvider",
                "AutoGeneratedHandlerListProvider"
            )
            .addProperty(
                PropertySpec.builder("autoGeneratedHandlerModule", ClassName("org.koin.core.module", "Module"))
                    .initializer(moduleBuilder.build())
                    .build()
            )
            .build()

        fileSpec.writeTo(File(kaptKotlinGeneratedDir!!))
    }
}