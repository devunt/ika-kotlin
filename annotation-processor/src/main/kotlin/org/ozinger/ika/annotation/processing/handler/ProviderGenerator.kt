package org.ozinger.ika.annotation.processing.handler

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import org.ozinger.ika.annotation.Handler
import org.ozinger.ika.annotation.processing.Generator
import java.io.File
import javax.annotation.processing.ProcessingEnvironment
import javax.lang.model.element.Element
import javax.lang.model.element.ElementKind
import kotlin.reflect.KFunction

class ProviderGenerator(processingEnv: ProcessingEnvironment, kaptKotlinGeneratedDir: String?) :
    Generator(processingEnv, kaptKotlinGeneratedDir) {
    private val methodNames = mutableListOf<String>()

    override fun process(elements: Set<Element>) {
        elements
            .filter { it.kind == ElementKind.CLASS }
            .forEach { `class` ->
                `class`.enclosedElements
                    .filter { it.kind == ElementKind.METHOD && it.getAnnotation(Handler::class.java) != null }
                    .forEach { element ->
                        val packageName = processingEnv.elementUtils.getPackageOf(element).qualifiedName
                        val className = `class`.simpleName
                        val methodName = element.simpleName

                        methodNames.add("$packageName.$className::$methodName")
                    }
            }

        val initBuilder = CodeBlock.builder()
            .addStatement("list = listOf(")

        for (name in methodNames) {
            initBuilder.addStatement("%L,", name)
        }

        initBuilder.addStatement(")")

        val fileSpec = FileSpec.builder("org.ozinger.ika.handler", "AutoGeneratedHandlerListProvider")
            .addType(
                TypeSpec.classBuilder("AutoGeneratedHandlerListProvider")
                    .addSuperinterface(ClassName("org.ozinger.ika.handler", "HandlerListProvider"))
                    .addProperty(
                        "list",
                        ClassName(
                            "kotlin.collections",
                            "List"
                        ).parameterizedBy(KFunction::class.parameterizedBy(Unit::class)),
                        KModifier.OVERRIDE
                    )
                    .addInitializerBlock(initBuilder.build())
                    .build()
            )
            .build()

        fileSpec.writeTo(File(kaptKotlinGeneratedDir!!))
    }

}