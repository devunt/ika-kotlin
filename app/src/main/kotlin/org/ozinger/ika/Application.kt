package org.ozinger.ika

import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import org.koin.core.context.startKoin
import org.koin.core.logger.Level
import org.ozinger.ika.configuration.Configuration
import org.ozinger.ika.handler.HandlerProcessor
import org.ozinger.ika.koin.autoGeneratedHandlerModule
import org.ozinger.ika.koin.definitionModule
import org.ozinger.ika.koin.eventModule
import org.ozinger.ika.koin.mainModule
import org.ozinger.ika.networking.IRCServer

class Application : KoinComponent {
    private val config: Configuration by inject()
    private val handlerProcessor: HandlerProcessor by inject()

    suspend fun start() = coroutineScope<Unit> {
        launch { handlerProcessor.collect() }
        val ircServer = IRCServer(
            config.server.id,
            config.server.name,
            config.server.description,
            config.link.password,
        )
        launch { ircServer.connect(config.link.host, config.link.port) }
        ircServer.introduceMyself()
    }
}

fun main() = runBlocking<Unit> {
    startKoin {
        printLogger(level = Level.DEBUG)
        environmentProperties()
        modules(mainModule, eventModule, definitionModule)
        modules(autoGeneratedHandlerModule)
    }

    val app = Application()
    app.start()
//    app.test()
}

